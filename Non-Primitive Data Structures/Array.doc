Array:
An array is a collection of items of same data type stored at contiguous memory locations. 

Problems
Check if Arrays are Sorted

class Solution {
    public boolean check(int[] nums) {
     int count =0;
     for(int i=0; i<nums.length; i++){
         if(nums[i] > nums[(i+1) % nums.length])
         count++;
     }
     return count > 1? false : true;
    }
}
Time Complexity: O[N]
Space Complexity:O[1]

Remove Duplicates from Sorted Array:

class Solution {
    public int removeDuplicates(int[] nums) {
        int j = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != nums[i - 1]) {
                nums[j] = nums[i];
                j++;
            }
        }
        return j;
    }
}

Time Complexity: O[N]
Space Complexity:O[1]

Rotate Array:

class Solution {

public void rotate(int[] nums, int k) {
    k %= nums.length;
    reverse(nums, 0, nums.length - 1);
    reverse(nums, 0, k - 1);
    reverse(nums, k, nums.length - 1);
}

public void reverse(int[] nums, int start, int end) {
    while (start < end) {
        int temp = nums[start];
        nums[start] = nums[end];
        nums[end] = temp;
        start++;
        end--;
    }
}
}

Time Complexity: O[N]
Space Complexity: O[1]

Move Zeroes:

class Solution {
    public void moveZeroes(int[] nums) {
       int j = 0;
    for(int i=0;i<nums.length;i++){
        if(nums[i] != 0)
        {
        nums[j] = nums[i];
        j++;
        }
        }
    while(j < nums.length)
        {
        nums[j] = 0;
        j++;
        } 
    }
}
Time Complexity : O[N]
Space Complexity: O[1]

Union of Two Sorted Arrays:

class Solution
{
    //Function to return a list containing the union of the two arrays.
    public static ArrayList<Integer> findUnion(int arr1[], int arr2[], int n, int m)
    {
        
    ArrayList<Integer> ar = new ArrayList();
    Set<Integer> a = new TreeSet<>();
    for(int i=0;i<n ;i++){
        a.add(arr1[i]);
    }
    for(int i=0; i<m; i++){
        a.add(arr2[i]);
    }
    return new ArrayList<>(a);
    }
}

Time Complexity: O[n+m]
Space Complexity:O[n]+O[m]


Missing Number:

class Solution {
    public int missingNumber(int[] nums) {
        int N = nums.length;
       int sum = (N*(N+1))/2;
       int s2=0;
       for( int i=0;i<N;i++){
           s2=s2+nums[i];
       }
        return sum-s2;
    }
}

Time Complexity: O[N]
Space Complexity:O[1] 

Max Consecutive Ones:

import java.util.*;
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int maxi=0;
        int count=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==1){
                count++;
            }
            else{
                count=0;
            }
            maxi=Math.max(maxi,count);
        }
        return maxi;
    }
}

Time Complexity: O[N]
Space Complexity:O[1]

Single Number: Appears Once:

import java.util.*;
class Solution {
    public int singleNumber(int[] nums) {
        int xor=0;
      for(int i=0;i<nums.length;i++){
          xor = xor ^ nums[i];
      }  
      return xor;
    }
}

Time Complexity : O[N]
Space Complexity: O[1]


Medium Level Question
Majority Element

Moore's Voting Algorithm:
class Solution {
    public int majorityElement(int[] nums) {
        int count = 0, maxElement = 0;
				for(int num: nums) {
					if(count == 0) {
						maxElement = num;
					}
					if(num == maxElement) {
						count++;
					} else {
						count--;
					}
				}
                

				return maxElement;
    }
}

Kadane Algorithm:
Maximum Subarray

import java.util.*;
class Solution {
    public int maxSubArray(int[] nums) {
        int n=nums.length;
        long maxi = Long.MIN_VALUE; 
        long sum = 0;

        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (sum > maxi) {
                maxi = sum;
            }
            if (sum < 0) {
                sum = 0;
            }
        }
        return Math.toIntExact(maxi);
    }
}