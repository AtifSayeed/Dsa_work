Sorting Techniques:
1.Selection Sort
2.Bubble Sort
3.Insertion Sort
4.Merge Sort
5.Recursive Bubble Sort
6.Recursive Insertion Sort
7.Quick Sort

There are many more techniques, but these are efficient and sufficient i guess to crack an Interview.

Selection Sort:

selection of minimum from the above list and Swap
[get the minimum and swap]

public class MyClass{
    public void SelectionSort(int arr[], int n){
        for(int i=0;i<n-1;i++){
            int mini = i;
            for(int j=i+1;j<n;j++){
                if(arr[j]<arr[i]){
                    mini=j;
                }
                //hello.
            }
            //swap
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
        System.out.print("After Selection Sorting");
        for(int i=0;i<n;i++){
            System.out.print(arr[i]+" ");
        }
        System.out.println();
    }
    public static void main(String[] args){
        Scanner sc = new Scanner(system.in);
        int arr[] = {10,25,8,....};
        int n = arr.length;
        System.out.println("Before Selection Sorting");
        for(int i=0;i<n;i++){
            System.out.print(arr[i]+" ");
        }
        System.out.println();
        SelctionSort(arr[], n);
    }
}

time Complexity - O[N*2]
Space Complexity- O[1]

Bubble Sort:

pushes the maximum to the last by adjacent swaping

public class Main{
    public void bubbleSort(int arr[],int n){
        for(int i=n-1;i>0;i--){
            for(int j=0;j<i-1;j++){
                if(arr[j]>arr[j+1]){
                     int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        S.o.p(After+" ");
        for(int i=0;;i<n;i++){
            S.O.P(arr[i]);
        }
        System.out.println();
    }
    public static void main(String[] args){
        int arr[]={10,20,....};
        int n = arr.length;
        S.O.P("Before");
        for(int i=0;i<n;i++){
            S.O.P(arr[i]+" ");
        }
        System.out.println();
        BubbleSort(arr,n);   
        }
}

Time Complexity - O[N*2]
Space Complexity - O[1]

Recursive Bubble Sort:

import java.util.*;

public class tUf {
    static void bubble_sort(int[] arr, int n) {
        //Base case: range == 1.
        if (n == 1) return;
        for (int j = 0; j <= n - 2; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }

        //Range reduced after recursion:
        bubble_sort(arr, n - 1);

    }
    public static void main(String args[]) {
        int arr[] = {13, 46, 24, 52, 20, 9};
        int n = arr.length;
        System.out.println("Before Using Bubble Sort: ");
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        bubble_sort(arr, n);

        System.out.println("After bubble sort: ");
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }
} 

Time Complexity:
Space Complexity:

Insertion Sort:

It Always Takes an element and places it in its correct position

public class Class{
  public void InsertionSort(int arr[], int n){
    for(int i=0;i<n;i++){
      int j = i;
      while(arr[j]>0 && arr[j-1]>arr[j]){
        int temp = arr[j-1];
        arr[j-1] = arr[j];
        arr[j] = temp;
        j--;
      }
    }
    System.out.print("After" + " ");
    for(int i=0;i<n;i++){
      s.o.p(arr[i]);
    }
  }
  public static void main(String[] args){
    int arr[];
    int n=arr.length;
    for(int i=0li<n;i++){
      S.O.P(before +"arr[i]");
    }
    System.out.println();
    InsertionSort(arr,n);
  }
}

Time Complexity = O[n-1]*O[n-1/2] => O[N*2]
Space Complexity = O[1]

Merge Sort:
public class Main{
public static void merge(int arr[], int low, int mid, int high){
    ArrayList<Integer> array = new ArrayList<>();
    int left = low;
    int right = mid+1;

    while(left<=mid && right<=high){
        if(arr[left]<=arr[right]){
            array.add(arr[left]);
            left++;
        }else{
            array.add(arr[right]);
            right++;
        }
    }
    while(left<=mid){
        array.add(arr[left]);
        left++;
    } 
    while(right<=high){
        array.add(arr[right]);
        right++;
    }
    for(int i=low;i<=high;i++){
        arr[i]=array.get[i-low];
    }
}
public static void mergeSort(int arr[], int low, int high){
    if(low==high) return;
    int mid=(low+high)/2;
    mergeSort(arr, low, mid);
    mergeSort(arr, mid+1, high);
    merge(arr, low, mid, high);
}
public static void main(String[] args){
    mergeSort(arr,0,n-1);
}
}

Time Complexity: O[nlogn]
Space Complexity: O[n]

Quick Sort:

import java.util.*;

class Solution {
    static int partition(List<Integer> arr, int low, int high) {
        int pivot = arr.get(low);
        int i = low;
        int j = high;

        while (i < j) {
            while (arr.get(i) <= pivot && i <= high - 1) {
                i++;
            }

            while (arr.get(j) > pivot && j >= low + 1) {
                j--;
            }
            if (i < j) {
                int temp = arr.get(i);
                arr.set(i, arr.get(j));
                arr.set(j, temp);
            }
        }
        int temp = arr.get(low);
        arr.set(low, arr.get(j));
        arr.set(j, temp);
        return j;
    }

    static void qs(List<Integer> arr, int low, int high) {
        if (low < high) {
            int pIndex = partition(arr, low, high);
            qs(arr, low, pIndex - 1);
            qs(arr, pIndex + 1, high);
        }
    }
    public static List<Integer> quickSort(List<Integer> arr) {
        // Write your code here.
        qs(arr, 0, arr.size() - 1);
        return arr;
    }
}

public class tUf {
    public static void main(String args[]) {
        List<Integer> arr = new ArrayList<>();
        arr = Arrays.asList(new Integer[] {4, 6, 2, 5, 7, 9, 1, 3});
        int n = arr.size();
        System.out.println("Before Using insertion Sort: ");
        for (int i = 0; i < n; i++) {
            System.out.print(arr.get(i) + " ");
        }
        System.out.println();
        arr = Solution.quickSort(arr);
        System.out.println("After insertion sort: ");
        for (int i = 0; i < n; i++) {
            System.out.print(arr.get(i) + " ");
        }
        System.out.println();
    }

} 

Time Complexity: O[n*logn]
Space Complexity:O[n*2]