Sorting Techniques:
1.Selection Sort
2.Bubble Sort
3.Insertion Sort
4.Merge Sort
5.Recursive Bubble Sort
6.Recursive Insertion Sort
7.Quick Sort

There are many more techniques, but these are efficient and sufficient i guess to crack an Interview.

Selection Sort:

selection of minimum from the above list and Swap
[get the minimum and swap]

public class MyClass{
    public void SelectionSort(int arr[], int n){
        for(int i=0;i<n-1;i++){
            int mini = i;
            for(int j=i+1;j<n;j++){
                if(arr[j]<arr[i]){
                    mini=j;
                }
                //hello.
            }
            //swap
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
        System.out.print("After Selection Sorting");
        for(int i=0;i<n;i++){
            System.out.print(arr[i]+" ");
        }
        System.out.println();
    }
    public static void main(String[] args){
        Scanner sc = new Scanner(system.in);
        int arr[] = {10,25,8,....};
        int n = arr.length;
        System.out.println("Before Selection Sorting");
        for(int i=0;i<n;i++){
            System.out.print(arr[i]+" ");
        }
        System.out.println();
        SelctionSort(arr[], n);
    }
}

time Complexity - O[N*2]
Space Complexity- O[1]

Bubble Sort:

pushes the maximum to the last by adjacent swaping

public class Main{
    public void bubbleSort(int arr[],int n){
        for(int i=n-1;i>0;i--){
            for(int j=0;j<i-1;j++){
                if(arr[j]>arr[j+1]){
                     int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        S.o.p(After+" ");
        for(int i=0;;i<n;i++){
            S.O.P(arr[i]);
        }
        System.out.println();
    }
    public static void main(String[] args){
        int arr[]={10,20,....};
        int n = arr.length;
        S.O.P("Before");
        for(int i=0;i<n;i++){
            S.O.P(arr[i]+" ");
        }
        System.out.println();
        BubbleSort(arr,n);   
        }
}

Time Complexity - O[N*2]
Space Complexity - O[1]

Insertion Sort:

It Always Takes an element and places it in its correct position

public class Class{
  public void InsertionSort(int arr[], int n){
    for(int i=0;i<n;i++){
      int j = i;
      while(arr[j]>0 && arr[j-1]>arr[j]){
        int temp = arr[j-1];
        arr[j-1] = arr[j];
        arr[j] = temp;
        j--;
      }
    }
    System.out.print("After" + " ");
    for(int i=0;i<n;i++){
      s.o.p(arr[i]);
    }
  }
  public static void main(String[] args){
    int arr[];
    int n=arr.length;
    for(int i=0li<n;i++){
      S.O.P(before +"arr[i]");
    }
    System.out.println();
    InsertionSort(arr,n);
  }
}

Time Complexity = O[n-1]*O[n-1/2] => O[N*2]
Space Complexity = O[1]
