In hashing there is a hash function that maps keys to some values. But these hashing function may lead to collision that is two or more keys are mapped to same value. Chain hashing avoids collision. The idea is to make each cell of hash table point to a linked list of records that have same hash function value.

Let’s create a hash function, such that our hash table has ‘N’ number of buckets. 
To insert a node into the hash table, we need to find the hash index for the given key. And it could be calculated using the hash function. 

Example: hashIndex = key % noOfBuckets

Insert: Move to the bucket corresponds to the above calculated hash index and insert the new node at the end of the list.
Delete: To delete a node from hash table, calculate the hash index for the key, move to the bucket corresponds to the calculated hash index, search the list in the current bucket to find and remove the node with the given key (if found). 

Set: HashSet and TreeSet

Map: HashMap and TreeMap

HashSet:

HashSet implements the Set.
1. Unordered Collections
2. hashing Algoorithm
3. Unique values to Object

Syntax:
HashSet<String> set = new HashSet<String>();
set.add("");
set.contains();
System.out.println(set);

Iteration:
for(int i:set)
S.O.P(i);

-Accepts one null value.

TreeSet:
1.Accept unique elements
2.maintainn ascending order.

Syntax:
TreeSet<String> tset = new TreeSet<String>();
tset.add("");
S.O.P(tset.descendingSet());

Iteration:
Iterator itr = tset.iterstor();
while(itr.hasNext())
{
    S.O.P(itr.Next())

}

HashMap:
1.contains the values
2.keys and values pair
3.key unique

Syntax:
HashMap<Integer,String> map = new HashMap<Integer,String>();
    map.put(1,"Atif");
    S.O.P(map);
for(Map.Entry m:map.entrySet());
    S.O.P(m);

TreeMap:
1.accept may null values2.
2.in ascending order

TIME COMPLEXITY  : best[O(1)]----worst[O(N)]
SPACE COMPLEXITY : best[O(N)]----worst[O(N)]

Counting Frequency:

public class MyClass{
    public statoc void main(String[] args){
        int arr[] = {10,,20,....40};
        int n = arr.length;
    }
    public static countFreq(int arr[], int n){
        Hashmap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<n;i++){
            if(maap.containsKey[arr[i]]){
                map.put(arr[i],map.get[arr[i]]+1);
            }
            else{
                map.put(arr[i],1);
            }
        }
        for(Map.Entry<integer,Integer> entry : map.entrySet<>()){

            System.out.println(entry);
        }
    }
}

Find a pair with the given sum in an array

Brute Force:

class Main
{
    // Naive method to find a pair in an array with a given sum
    public static void findPair(int[] nums, int target)
    {
        // consider each element except the last
        for (int i = 0; i < nums.length - 1; i++)
        {
            // start from the i'th element until the last element
            for (int j = i + 1; j < nums.length; j++)
            {
                // if the desired sum is found, print it
                if (nums[i] + nums[j] == target)
                {
                    System.out.printf("Pair found (%d, %d)", nums[i], nums[j]);
                    return;
                }
            }
        }
 
        // we reach here if the pair is not found
        System.out.println("Pair not found");
    }
 
    public static void main (String[] args)
    {
        int[] nums = { 8, 7, 2, 5, 3, 1 };
        int target = 10;
 
        findPair(nums, target);
    }
}

The time complexity of the above solution is O(n2) and doesn’t require any extra space, where n is the size of the input.

2. Using Hashing:

import java.util.HashMap;
import java.util.Map;
 
class Main
{
    // Function to find a pair in an array with a given sum using hashing
    public static void findPair(int[] nums, int target)
    {
        // create an empty HashMap
        Map<Integer, Integer> map = new HashMap<>();
 
        // do for each element
        for (int i = 0; i < nums.length; i++)
        {
            // check if pair (nums[i], target-nums[i]) exists
 
            // if the difference is seen before, print the pair
            if (map.containsKey(target - nums[i]))
            {
                System.out.printf("Pair found (%d, %d)",
                    nums[map.get(target - nums[i])], nums[i]);
                return;
            }
 
            // store index of the current element in the map
            map.put(nums[i], i);
        }
 
        // we reach here if the pair is not found
        System.out.println("Pair not found");
    }
 
    public static void main (String[] args)
    {
        int[] nums = { 8, 7, 2, 5, 3, 1 };
        int target = 10;
 
        findPair(nums, target);
    }
}
The time complexity of the above solution is O(n) and requires O(n) extra space, where n is the size of the input.
